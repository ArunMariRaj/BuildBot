# -*- python -*-
# ex: set syntax=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
c['slaves'] = [buildslave.BuildSlave("buildslave007", "password")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 8085}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
        'https://github.com/ArunMariRaj/BuildBot.git',
        workdir='gitpoller-workdir', branch='master',
        pollinterval=1*60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

c['schedulers'] = []
c['schedulers'].append(schedulers.SingleBranchScheduler(
                            name="continuous",
                            change_filter=util.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["continuous"]))
c['schedulers'].append(schedulers.ForceScheduler(
                            name="force",
                            builderNames=["runtests"]))

####### BUILDERS
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import ShellCommand
# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

factory = util.BuildFactory()

def MSBuildFramework4(factory, configuration, projectdir):
    factory.addStep(ShellCommand(command=['MSbuild.exe',
                                          '/t:Build', '/p:VisualStudioVersion=14.0', 'BuildBotTrial\\BuildBotTrial.sln', ],
                                 workdir=projectdir, name="Compile BuildBot project",
                                 description="BuildBot projects Completed Build",
                                 descriptionDone="Building BuildBot project"))
    # factory.addStep(ShellCommand(command=['MSbuild.exe',
                                          # '/t:Build', '/p:VisualStudioVersion=14.0', 'BuildBotTrial\\BuildBotTrial.sln', ],
                                 # workdir=projectdir, name="Compile BuildBot projects",
                                 # description="Compiling WebApi .net projects",
                                 # descriptionDone="Compile BuildBot projects"))

# def RunTests(factory, testproject, configuration, testdirectory):
        # factory.addStep(ShellCommand(command=['src\\xunit.console\\bin\\%s\\xunit.console.exe' % configuration,
                                # '%s\\%s' % (testdirectory, testproject), "/html", 
                                # "%s\\testresults.html" % testdirectory],
                                # workdir='build\\', name="Run %s" % testproject,
                                # description="Running %s" % testproject ,
                                # descriptionDone="Run %s done" % testproject,
                                # flunkOnFailure=False, warnOnFailure=True))
# check out the source
factory.addStep(steps.Git(repourl='https://github.com/ArunMariRaj/BuildBot.git', mode='incremental'))
MSBuildFramework4(factory, 'Debug', 'build\\')
factory.addStep(ShellCommand(command=['nunit3-console.exe','BuildBotTrial\\BuildBotTrial.Tests\\bin\\debug\\BuildBotTrial.Tests.dll', ],
                                 workdir="build\\", name="Test BuildBot projects",
                                 description="BuildBot project Tests Completed",
                                 descriptionDone="Running BuildBot project Tests"))
# run the tests (note that this will require that 'trial' is installed)
#factory.addStep(steps.ShellCommand(command=["trial", "pyflakes"]))

c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="continuous",
      slavenames=["buildslave007"],
      factory=factory))
c['builders'].append(
    util.BuilderConfig(name="runtests",
      slavenames=["buildslave007"],
      factory=factory))


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("pyflakes","pyflakes")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',  # ..or this
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8082, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "Aruns BuildBotProject"
c['titleURL'] = "https://github.com/ArunMariRaj/BuildBot/blob/master/README.md"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8082/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
